{"version":3,"file":"static/js/121.93ec5784.chunk.js","mappings":"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","sources":["../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/selectors.js","components/Contacts/Contacts.js","components/Form/Form.js","pages/Contacts.js"],"sourcesContent":["// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.filter.error;\n\nexport const selectFilteredContacts = createSelector(\n    [selectContacts, selectFilter],\n    (contacts, filter) => {\n        const normalisedFilter = filter.toLowerCase();\n        return contacts.filter(({ name }) =>\n            name.toLowerCase().includes(normalisedFilter)\n        );\n    }\n);\nexport const selectIsContact = createSelector([selectContacts], contacts => {\n    return newUser => {\n        const normalizedName = newUser.toLowerCase();\n        return !contacts.find(user => user.name.toLowerCase() === normalizedName);\n    };\n});","import { deleteContact } from '../../redux/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/filterSlice';\nimport { selectError, selectFilteredContacts, selectIsLoading } from 'redux/selectors';\nimport { loader } from 'helpers/loader';\nimport { Box, Button, FormLabel, Input, List, ListItem } from '@chakra-ui/react';\n\nexport const ContactList = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectFilteredContacts);\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    const handleFilterChange = e => {\n        dispatch(setFilter(e.target.value));\n    };\n\n    return (\n        <Box display='block'>\n            <FormLabel mb={6}>\n                Find contacts by name\n                <Input\n                    placeholder='Enter find name'\n                    type=\"text\"\n                    name=\"filter\"\n                    onChange={handleFilterChange}\n                />\n            </FormLabel>\n            <List spacing={4}>\n                {isLoading && loader()}\n                {error && <h3>{error}</h3>}\n\n                {contacts.length !== 0\n                    ? contacts.map(({ id, name, number }) => (\n                        <ListItem key={id}>\n                            {name}: {number}\n                            <Button colorScheme='linkedin' variant='solid' size='xs' ml={2} type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n                                Delete\n                            </Button>\n                        </ListItem>\n                    ))\n                    : ''}\n            </List>\n        </Box>\n    );\n}","import { Form, Formik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/operations';\nimport { selectIsContact } from 'redux/selectors';\nimport { notifySuccess, notifyWarning } from 'helpers/notifications';\nimport { Button, FormControl, FormLabel, Input } from '@chakra-ui/react';\n\nexport const ContactForm = () => {\n    const dispatch = useDispatch();\n\n    const checkContacts = useSelector(selectIsContact);\n    const handleSubmit = ({ name, number }, action) => {\n        if (!checkContacts(name)) {\n            return notifyWarning(`${name} is already is contacts`)\n                ;\n        }\n        dispatch(addContact({ name, number }));\n        notifySuccess(`${name} added to phonebook`)\n        action.resetForm();\n    };\n    return (\n        <Formik initialValues={{ name: '', number: '' }} onSubmit={handleSubmit}>\n            {({ values, handleChange }) => (\n                <Form>\n                    <FormControl>\n                        <FormLabel display='block'>\n                            Name\n                            <Input\n                                placeholder='Enter contact`s name'\n                                type=\"text\"\n                                name=\"name\"\n                                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                                required\n                                value={values.name}\n                                onChange={handleChange}\n                            />\n                        </FormLabel>\n                        <FormLabel>\n                            Number\n                            <Input\n                                placeholder='Enter contact`s number'\n                                type=\"tel\"\n                                name=\"number\"\n                                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                                required\n                                value={values.number}\n                                onChange={handleChange}\n                            />\n                        </FormLabel>\n                        <Button type=\"submit\" colorScheme='linkedin' variant='outline'>Add contact</Button>\n\n                    </FormControl>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n","import { ContactList } from '../components/Contacts/Contacts';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { getContacts } from 'redux/operations';\nimport { Helmet } from 'react-helmet';\nimport { ContactForm } from 'components/Form/Form';\nimport { Box } from '@chakra-ui/react';\n\nconst Contacts = () => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(getContacts());\n    }, [dispatch]);\n\n    return (\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n            <Helmet>\n                <title>Contact-list</title>\n            </Helmet>\n            <ContactForm />\n            <ContactList />\n        </Box>\n    );\n};\n\nexport default Contacts;"],"names":["NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","filter","error","selectFilteredContacts","normalisedFilter","toLowerCase","includes","selectIsContact","newUser","normalizedName","user","ContactList","dispatch","useDispatch","useSelector","display","mb","placeholder","type","onChange","e","setFilter","target","spacing","loader","id","number","colorScheme","variant","size","ml","onClick","deleteContact","ContactForm","checkContacts","initialValues","onSubmit","action","notifyWarning","addContact","notifySuccess","resetForm","values","handleChange","pattern","title","required","useEffect","getContacts","alignItems","justifyContent","Helmet"],"sourceRoot":""}